service: amplify-utilities
frameworkVersion: '3'
package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket
custom:

  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 

  pythonRequirements:
    dockerizePip: non-linux
    layer: true

  stages:
    - dev
    - staging
    - prod

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

         

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}   
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  environment:
    #from stageVariables file
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    MIN_ACU: ${self:custom.stageVariables.MIN_ACU}
    MAX_ACU: ${self:custom.stageVariables.MAX_ACU}
    VPC_ID: ${self:custom.stageVariables.VPC_ID}
    PRIVATE_SUBNET_ONE: ${self:custom.stageVariables.PRIVATE_SUBNET_ONE}
    PRIVATE_SUBNET_TWO: ${self:custom.stageVariables.PRIVATE_SUBNET_TWO}
    VPC_CIDR: ${self:custom.stageVariables.VPC_CIDR}
    API_ID: ${self:custom.stageVariables.API_ID}
    SES_SECRET_ARN: ${self:custom.stageVariables.SES_SECRET_NAME}
    OPENAI_API_KEY_ARN: ${self:custom.stageVariables.OPENAI_API_KEY_ARN}
    # LLM_ENDPOINTS_SECRETS_NAME_ARN IS NEW
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME_ARN}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - ${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}

functions:
  execute_rename:
    timeout: 600
    handler: rename_chats.execute_rename
    events:
      - http:
          path: /execute_rename
          method: post
          cors: true
    layers:
      - Ref: PythonRequirementsLambdaLayer
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}

resources:
  Resources:
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for  Lambda Functions"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
