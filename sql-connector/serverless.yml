service: vu-amplify-sql-connector

frameworkVersion: '3'
package:
  exclude:
    - node_modules/**
    - venv/**
    - test_script.py

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket
custom:

  stageVariables: ${file(../var/${self:provider.stage}-var.yml)} 

  pythonRequirements:
    dockerizePip: non-linux
    layer: true

  stages:
    - dev
    - staging
    - prod

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.9
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  
  apiGateway:
    restApiId:
      ${self:custom.stageVariables.REST_API_ID}
    restApiRootResourceId:
      ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}

  environment:
    #from stageVariables file
    OAUTH_AUDIENCE: ${self:custom.stageVariables.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVariables.OAUTH_ISSUER_BASE_URL}
    MIN_ACU: ${self:custom.stageVariables.MIN_ACU}
    MAX_ACU: ${self:custom.stageVariables.MAX_ACU}
    VPC_ID: ${self:custom.stageVariables.VPC_ID}
    PRIVATE_SUBNET_ONE: ${self:custom.stageVariables.PRIVATE_SUBNET_ONE}
    PRIVATE_SUBNET_TWO: ${self:custom.stageVariables.PRIVATE_SUBNET_TWO}
    VPC_CIDR: ${self:custom.stageVariables.VPC_CIDR}
    API_ID: ${self:custom.stageVariables.API_ID}
    SES_SECRET_ARN: ${self:custom.stageVariables.SES_SECRET_ARN}
    OPENAI_API_KEY_ARN: ${self:custom.stageVariables.OPENAI_API_KEY_ARN}
    SECRETS_ARN_NAME: ${self:custom.stageVariables.SECRETS_ARN_NAME}
    REST_API_ID: ${self:custom.stageVariables.REST_API_ID}
    REST_API_ROOT_RESOURCE_ID: ${self:custom.stageVariables.REST_API_ROOT_RESOURCE_ID}
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVariables.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    
    # MYSQL_DB VARS
    # MYSQL_DB_HOST: ${self:custom.stageVariables.MYSQL_DB_HOST}
    MYSQL_DB_USERNAME: mysqladmin_${sls:stage}
    MYSQL_DB_NAME: AmplifyMySQL_${sls:stage}
    MYSQL_DB_SECRETS_NAME: ${self:custom.stageVariables.MYSQL_DB_SECRETS_NAME}
    DB_MODE: ${self:custom.stageVariables.DB_MODE}
    MYSQL_WRITE_ENDPOINT: !GetAtt MySQLDbCluster.Endpoint.Address
    # ${self:service}-${self:provider.stage}-MySQLDbClusterWriteEndpoint
    MYSQL_READ_ENDPOINT: !GetAtt MySQLDbCluster.ReadEndpoint.Address
    # ${self:service}-${self:provider.stage}-MySQLDbClusterReadEndpoint
    


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - sqs:DeleteMessage
            - rds-data:ExecuteStatement
            - rds-data:BatchExecuteStatement
            - rds-data:BeginTransaction
            - rds-data:CommitTransaction
            - rds-data:RollbackTransaction
          Resource:
            - "arn:aws:secretsmanager:us-east-1:514391678313:secret:openai-endpoints-2O6UlC"
            - !GetAtt MySQLDbCluster.DBClusterArn
            - !Ref MySQLDbSecret
functions:
  execute_sql_query:
    timeout: 30
    handler: assistants.handler.execute_sql_query
    events:
      - http:
          path: dar/execute_sql_query
          method: post
          cors: true
    layers:
      - Ref: PythonRequirementsLambdaLayer
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}

  create_db_query:
    timeout: 30
    handler: assistants.create_db.create_db_query
    layers:
      - Ref: PythonRequirementsLambdaLayer
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}           
resources:
  Resources:
    LambdaSecurityGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
            GroupDescription: "Security group for  SQL Connector Lambda Function"
            VpcId: ${self:provider.environment.VPC_ID}
            SecurityGroupEgress:
              - IpProtocol: -1
                CidrIp: 0.0.0.0/0  
    MySQLDbCluster:
      DependsOn: MySQLDbSecurityGroup
      DeletionPolicy: Snapshot
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName: ${self:provider.environment.MYSQL_DB_NAME}
        DBClusterIdentifier: ${self:service}-${self:provider.stage}-db-cluster
        Engine: aurora-mysql # Change the engine to Aurora MySQL
        EngineVersion: '8.0.mysql_aurora.3.04.1' # Specify a compatible engine version for Aurora MySQL
        ServerlessV2ScalingConfiguration: # This is a new property for Serverless v2
          MinCapacity: ${self:provider.environment.MIN_ACU}
          MaxCapacity: ${self:provider.environment.MAX_ACU}
        EnableCloudwatchLogsExports:
          - audit # Change log exports to MySQL-compatible logs if needed
          - error
          - general
          - slowquery
        MasterUsername: ${self:provider.environment.MYSQL_DB_USERNAME}
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${MySQLDbSecret}:SecretString::}}'
        VpcSecurityGroupIds:
          - !Ref MySQLDbSecurityGroup
        DBSubnetGroupName: !Ref MySQLDbSubnetGroup
        BackupRetentionPeriod: 7

    MySQLDbInstance1:
          Type: 'AWS::RDS::DBInstance'
          Properties:
            Engine: aurora-mysql
            DBInstanceClass: db.serverless
            DBClusterIdentifier: !Ref MySQLDbCluster


    MySQLDbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet group for RDS Aurora Serverless MySQL Database"
        SubnetIds:
          - ${self:provider.environment.PRIVATE_SUBNET_ONE}
          - ${self:provider.environment.PRIVATE_SUBNET_TWO}

    MySQLDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for RDS Aurora Serverless"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: ${self:provider.environment.VPC_CIDR}
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: '10.2.224.0/20'

    MySQLDbSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${sls:stage}/mysql/db-creds
        Description: "Credentials for Aurora Serverless MySQL Database"
        GenerateSecretString:
          PasswordLength: 16
          ExcludeCharacters: "\"@/\\"
