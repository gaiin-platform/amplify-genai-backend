service: amplify-${self:custom.stageVars.DEP_NAME}-admin
frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-cloudformation-changesets

custom:
  pythonRequirements:
    dockerizePip: non-linux
  stageVars: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

  cf-changesets:
    requireChangeSet: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}
    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  versionFunctions: false
  logRetentionInDays: 365
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"   
  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    API_KEYS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-api-keys
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-${sls:stage}-cost-calculations
    LAMBDA_API_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    API_BASE_URL: https://${self:custom.stageVars.CUSTOM_API_DOMAIN}
    AMPLIFY_ADMIN_DYNAMODB_TABLE: ${self:service}-${sls:stage}-admin-configs
    AMPLIFY_ADMIN_LOGS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-admin-logs
    ADMINS: ${self:custom.stageVars.ADMINS}
    APP_ARN_NAME: ${sls:stage}-amplify-app-vars
    SECRETS_ARN_NAME: ${sls:stage}-amplify-app-secrets
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${sls:stage}-openai-endpoints
    S3_CONVERSION_OUTPUT_BUCKET_NAME: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-document-conversion-output
    AMPLIFY_GROUPS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-amplify-groups
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}

  iam:
    role:
      managedPolicies:
        - !Ref LambdaAPIIAMPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

functions:

  update_admin_config:
    handler: service/core.update_configs
    timeout: 30
    events:
      - http:
          path: amplifymin/configs/update
          method: post
          cors: true


  get_admin_config:
    handler: service/core.get_configs
    timeout: 30
    events:
      - http:
          path: amplifymin/configs
          method: get
          cors: true


  get_feature_flags:
    handler: service/core.get_user_feature_flags
    timeout: 20
    events:
      - http:
          path: amplifymin/feature_flags
          method: get
          cors: true

  get_user_app_configs:
    handler: service/core.get_user_app_configs
    timeout: 10
    events:
      - http:
          path: amplifymin/user_app_configs
          method: get
          cors: true

  get_pptx_templates:
    handler: service/core.get_pptx_for_users
    timeout: 10
    events:
      - http:
          path: amplifymin/pptx_templates
          method: get
          cors: true


  delete_pptx_template:
    handler: service/core.delete_pptx_by_admin
    timeout: 10
    events:
      - http:
          path: amplifymin/pptx_templates/delete
          method: delete
          cors: true

  upload_pptx_template:
    handler: service/core.generate_presigned_url_for_upload
    timeout: 10
    events:
      - http:
          path: amplifymin/pptx_templates/upload
          method: post
          cors: true

  authenticate_admin:
    handler: service/core.verify_valid_admin
    timeout: 10
    events:
      - http:
          path: amplifymin/auth
          method: post
          cors: true

  get_user_amplify_groups:
    handler: service/core.get_user_amplify_groups
    events:
      - http:
          path: amplifymin/amplify_groups/list
          method: get
          cors: true       

  get_user_affiliated_groups:
    handler: service/core.get_user_affiliated_groups
    events:
      - http:
          path: amplifymin/amplify_groups/affiliated
          method: get
          cors: true

  is_member_of_amp_group:
    handler: service/core.verify_is_in_amp_group
    timeout: 300
    events:
      - http:
          path: amplifymin/verify_amp_member
          method: post
          cors: true

  sync_assistant_admins:
    runtime: python3.11
    handler: service/core.sync_assistant_admins
    timeout: 900
    events:
      - schedule:
          rate: rate(3 minutes)
          enabled: true

resources:
  Resources:
    LambdaAPIIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.LAMBDA_API_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - s3:ListBucket
                - s3:PutObject
                - s3:DeleteObject
                - s3:GetObject
                - secretsmanager:GetSecretValue
                - secretsmanager:PutSecretValue
                - secretsmanager:UpdateSecretVersionStage
              Resource:
                - 'arn:aws:secretsmanager:us-east-1:*:secret:${self:provider.environment.APP_ARN_NAME}*'
                - 'arn:aws:secretsmanager:us-east-1:*:secret:${self:provider.environment.SECRETS_ARN_NAME}*'
                - 'arn:aws:secretsmanager:us-east-1:*:secret:${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}*'
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AMPLIFY_ADMIN_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AMPLIFY_ADMIN_LOGS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:s3:::${self:provider.environment.S3_CONVERSION_OUTPUT_BUCKET_NAME}"
                - "arn:aws:s3:::${self:provider.environment.S3_CONVERSION_OUTPUT_BUCKET_NAME}/*"

    
    AmplifyAdminTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-${sls:stage}-admin-configs
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true        
        AttributeDefinitions:
          - AttributeName: 'config_id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'config_id'
            KeyType: 'HASH'  
        # Enable streams so we can trigger on new inserts:
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    


    AmplifyAdminLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-admin-logs
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true        
        AttributeDefinitions:
          - AttributeName: "log_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "log_id"
            KeyType: "HASH"      

  Outputs:
    AmplifyAdminTableStreamArn:
      Value: !GetAtt AmplifyAdminTable.StreamArn
      Export:
        Name:
          Fn::Sub: "${sls:stage}-AmplifyAdminTableStreamArn"

