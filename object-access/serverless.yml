service: amplify-${self:custom.stageVars.DEP_NAME}-object-access
frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket
  - serverless-iam-roles-per-function
  - serverless-cloudformation-changesets

custom:
  pythonRequirements:
    dockerizePip: true
    layer: true

  cf-changesets:
    requireChangeSet: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}

  serverless-offline: 
    custom:
      config: ${file(../var/${self:provider.stage}-var.yml)} 

  stageVars: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

  deploymentBucket:
    versioning: true
    accelerate: false
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.stageVars.DEP_REGION}
  versionFunctions: false
  logRetentionInDays: 365
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"
  
  environment:
    CHANGE_SET_BOOLEAN: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    COGNITO_USER_POOL_ID: ${self:custom.stageVars.COGNITO_USER_POOL_ID}
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    OBJECT_ACCESS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-object-access
    API_KEYS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-api-keys
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations
    COGNITO_USERS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-cognito-users
    AMPLIFY_GROUPS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-amplify-groups
    AMPLIFY_GROUP_LOGS_DYNAMODB_TABLE: ${self:service}-${sls:stage}-amplify-group-logs
    API_BASE_URL: https://${self:custom.stageVars.CUSTOM_API_DOMAIN}  
    FILES_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-user-files
    HASH_FILES_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-hash-files
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}
    AMPLIFY_ADMIN_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-admin-${sls:stage}-admin-configs

  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole    
        - !Ref ObjectAccessLambdaPolicy

functions:

  cognito_users_get_emails:
    handler: cognito_users.get_emails
    layers:
      - Ref: PythonRequirementsLambdaLayer    
    timeout: 15
    events:
      - http:
          path: /utilities/emails
          method: get

  get_cognito_amp_groups:
    handler: cognito_users.get_user_groups
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12   
    events:
      - http:
          path: /utilities/get_user_groups
          method: get


  
  update_object_perms:
    runtime: python3.11
    handler: object_access.update_object_permissions
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 300
    events:
      - http:
          path: /utilities/update_object_permissions
          method: post
          cors: true

  can_access_objects:
    runtime: python3.11
    handler: object_access.can_access_objects
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 15
    events:
      - http:
          path: /utilities/can_access_objects
          method: post
          cors: true

  simulate_access:
    runtime: python3.11
    handler: object_access.simulate_access_to_objects
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 15
    events:
      - http:
          path: /utilities/simulate_access_to_objects
          method: post
          cors: true

  sync_cognito_users:
    runtime: python3.11
    handler: cognito_users_sync.sync_users_to_dynamo
    timeout: 900
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - schedule:
          rate: rate(5 minutes)
          enabled: true

  create_ast_admin_group:
    handler: groups.create_group
    timeout: 12
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /groups/create
          method: post
          cors: true

  create_amplify_asts:
    handler: groups.create_amplify_assistants
    timeout: 12
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /groups/assistants/amplify
          method: post
          cors: true


  replace_group_key:
    handler: groups.replace_group_key
    timeout: 12
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: /groups/replace_key
          method: post
          cors: true

  update_group_members:
    handler: groups.update_members
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12
    events:
      - http:
          path: /groups/update/members
          method: post
          cors: true

  update_group_types:
    handler: groups.update_group_types
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12
    events:
      - http:
          path: /groups/update/types
          method: post
          cors: true
      
  update_group_amp_groups:
    handler: groups.update_amplify_groups
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12
    events:
      - http:
          path: /groups/update/amplify_groups
          method: post
          cors: true

  update_group_system_users:
    handler: groups.update_system_users
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12
    events:
      - http:
          path: /groups/update/system_users
          method: post
          cors: true

  update_member_permission:
    handler: groups.update_members_permission
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12
    events:
      - http:
          path: /groups/update/members/permissions
          method: post
          cors: true

  list_groups:
    handler: groups.list_groups
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 30
    events:
      - http:
          path: /groups/list
          method: get
          cors: true

  list_all_groups:
    handler: groups.list_all_groups_for_admins
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 30
    events:
      - http:
          path: /groups/list_all
          method: get
          cors: true

  
  update_groups_by_admins:
    handler: groups.update_ast_admin_groups
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12
    events:
      - http:
          path: /groups/update
          method: post
          cors: true


  update_group_assistants:
    handler: groups.update_group_assistants
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 30
    events:
      - http:
          path: /groups/update/assistants
          method: post
          cors: true

  delete_group:
    handler: groups.delete_group
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 12
    events:
      - http:
          path: /groups/delete
          method: delete
          cors: true
    
  add_group_assistant_path:
    handler: groups.add_path_to_assistant
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 30
    events:
      - http:
          path: /groups/assistant/add_path
          method: post
          cors: true

  is_member_of_Ast_group:
    handler: groups.verify_is_member_ast_group
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 30
    events:
      - http:
          path: /groups/verify_ast_group_member
          method: post
          cors: true

resources:
  Resources:
    ObjectAccessLambdaPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:DeleteItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-${sls:stage}-cognito-users"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-${sls:stage}-accounts"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-${sls:stage}-object-access"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-${sls:stage}-api-keys"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-${sls:stage}-api-keys/index*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-${sls:stage}-amplify-groups"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:service}-${sls:stage}-amplify-group-logs"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-hash-files"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/amplify-${self:custom.stageVars.DEP_NAME}-admin-${sls:stage}-admin-configs"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-user-files"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-user-files/index/*"
            - Effect: Allow
              Action:
                - cognito-idp:ListUsers
              Resource:
                - !Sub "arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:custom.stageVars.COGNITO_USER_POOL_ID}"


    ObjectAccessTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-${sls:stage}-object-access
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: 'object_id'
            AttributeType: 'S'
          - AttributeName: 'principal_id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'object_id'
            KeyType: 'HASH'  # Partition key
          - AttributeName: 'principal_id'
            KeyType: 'RANGE'  # Sort key
        GlobalSecondaryIndexes:
          - IndexName: 'PrincipalIdIndex'
            KeySchema:
              - AttributeName: 'principal_id'
                KeyType: 'HASH'  # Partition key for the secondary index
            Projection:
              ProjectionType: 'ALL'
    
    CognitoUsersTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-${sls:stage}-cognito-users
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: 'user_id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'user_id'
            KeyType: 'HASH'   

    ApiKeyTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-${sls:stage}-api-keys
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true        
        AttributeDefinitions:
          - AttributeName: 'api_owner_id'
            AttributeType: 'S'
          - AttributeName: 'apiKey'
            AttributeType: 'S' 
        KeySchema:
          - AttributeName: 'api_owner_id'
            KeyType: 'HASH'
        GlobalSecondaryIndexes:
          - IndexName: ApiKeyIndex
            KeySchema:
              - AttributeName: apiKey
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'          


    AmplifyGroupsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:service}-${sls:stage}-amplify-groups
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true        
        AttributeDefinitions:
          - AttributeName: 'group_id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'group_id'
            KeyType: 'HASH'   


    AmplifyGroupLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-amplify-group-logs
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true        
        AttributeDefinitions:
          - AttributeName: "log_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "log_id"
            KeyType: "HASH"      
