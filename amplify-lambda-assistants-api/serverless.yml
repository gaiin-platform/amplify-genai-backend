service: amplify-${self:custom.stageVars.DEP_NAME}-assistants-api

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-cloudformation-changesets

custom:
  pythonRequirements:
    dockerizePip: non-linux
  stageVars: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.stageVars.DEP_REGION}
  versionFunctions: false
  logRetentionInDays: 365  
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"

  environment:
    INTEGRATION_STAGE: ${self:provider.stage}
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    OAUTH_STATE_TABLE: ${self:service}-${sls:stage}-oauth-state
    OAUTH_USER_TABLE: ${self:service}-${sls:stage}-user-oauth-integrations
    API_KEYS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-api-keys
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations
    LAMBDA_API_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    API_BASE_URL: "https://${self:custom.stageVars.CUSTOM_API_DOMAIN}"
    OP_LOG_DYNAMO_TABLE: ${self:service}-${sls:stage}-op-log
    OP_TRACING_ENABLED: true
    OP_TRACING_REQUEST_DETAILS_ENABLED: true
    OP_TRACING_RESULT_DETAILS_ENABLED: true
    JOB_STATUS_TABLE: ${self:service}-${sls:stage}-job-status
    JOB_RESULTS_BUCKET: ${self:service}-${sls:stage}-job-results
    AMPLIFY_ADMIN_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-admin-${sls:stage}-admin-configs
    S3_CONVERSION_OUTPUT_BUCKET_NAME: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-document-conversion-output # temp storage for downloaded integration file
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}

  iam:
    role:
      managedPolicies:
        - !Ref LambdaAPIIAMPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole


functions:

  getSupportedIntegrations:
    handler: integrations/oauth.get_supported_integrations
    timeout: 30
    events:
      - http:
          path: integrations/list_supported
          method: get

  listConnectedUserIntegrations:
    handler: integrations/oauth.list_connected_integrations
    timeout: 30
    events:
      - http:
          path: integrations/oauth/user/list
          method: get

  listIntegrationFiles:
    handler: integrations/drive_files.list_integration_files
    timeout: 300
    events:
      - http:
          path: integrations/user/files
          method: post

  uploadIntegrationFiles:
    handler: integrations/drive_files.drive_files_to_data_sources
    timeout: 300
    events:
      - http:
          path: integrations/user/files/upload
          method: post
    environment:
      OAUTH_ENCRYPTION_PARAMETER: /${self:service}/${sls:stage}/oauth/integrations/encryption #must start with /


  downloadIntegrationFile:
    handler: integrations/drive_files.download_integration_file
    timeout: 30
    events:
      - http:
          path: integrations/user/files/download
          method: post
    environment:
      OAUTH_ENCRYPTION_PARAMETER: /${self:service}/${sls:stage}/oauth/integrations/encryption #must start with /

  registerIntegrationSecret:
    handler: integrations/oauth.regiser_secret
    timeout: 30
    events:
      - http:
          path: integrations/oauth/register_secret
          method: post
    environment:
      OAUTH_ENCRYPTION_PARAMETER: /${self:service}/${sls:stage}/oauth/integrations/encryption #must start with /
      
  refreshIntegrationsToken:
    handler: integrations/oauth.refresh_integration_tokens
    timeout: 30
    events:
      - http:
          path: integrations/oauth/refresh_token
          method: POST
    environment:
        OAUTH_ENCRYPTION_PARAMETER: /${self:service}/${sls:stage}/oauth/integrations/encryption #must start with /
      
  execute_custom_auto:
    handler: service/core.execute_custom_auto
    timeout: 30
    events:
      - http:
          path: assistant-api/execute-custom-auto
          method: post
          cors: true

  get_job_result:
    handler: service/core.get_job_result
    timeout: 30
    events:
      - http:
          path: assistant-api/get-job-result
          method: post
          cors: true
  set_job_result:
    handler: service/core.update_job_result
    timeout: 30
    events:
      - http:
          path: assistant-api/set-job-result
          method: post
          cors: true
  startAuth:
    handler: integrations/oauth.start_auth
    timeout: 30
    events:
      - http:
          path: integrations/oauth/start-auth
          method: post
  authCallback:
    handler: integrations/oauth.auth_callback
    timeout: 30
    events:
      - http:
          path: integrations/oauth/callback
          method: get
    environment:
      OAUTH_ENCRYPTION_PARAMETER: /${self:service}/${sls:stage}/oauth/integrations/encryption #must start with /
  
  deleteUserIntegration:
    handler: integrations/oauth.handle_delete_integration
    timeout: 30
    events:
      - http:
          path: integrations/oauth/user/delete
          method: post



resources:
  Resources:
    LambdaAPIIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.LAMBDA_API_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:DeleteObject
              Resource:
                - "arn:aws:s3:::${self:provider.environment.JOB_RESULTS_BUCKET}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OAUTH_STATE_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OAUTH_USER_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AMPLIFY_ADMIN_DYNAMODB_TABLE}"
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:PutParameter
                - ssm:DeleteParameter
                - ssm:GetParametersByPath
              Resource:
                - "arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/oauth/*"
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:DescribeParameters
                - ssm:PutParameter
              Resource: 
                - arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter/${self:service}/${sls:stage}/oauth/integrations/encryption*
            - Effect: Allow  
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.JOB_STATUS_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OP_LOG_DYNAMO_TABLE}"
            - Effect: Allow  
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource:
                - "arn:aws:s3:::${self:provider.environment.S3_CONVERSION_OUTPUT_BUCKET_NAME}/*"

    OauthStateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.OAUTH_STATE_TABLE}
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
      
    OauthUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.OAUTH_USER_TABLE}
        AttributeDefinitions:
          - AttributeName: user_integration
            AttributeType: S
        KeySchema:
          - AttributeName: user_integration
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true

    OpLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.OP_LOG_DYNAMO_TABLE}
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true

    JobStatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.JOB_STATUS_TABLE}
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: job_id
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: job_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true

    JobResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.JOB_RESULTS_BUCKET}