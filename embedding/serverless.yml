service: amplify-${self:custom.stageVars.DEP_NAME}-embedding

frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-deployment-bucket
  - serverless-cloudformation-changesets

custom:
  pythonRequirements:
    dockerizePip: true
    layer: true
    slim: false


  cf-changesets:
    requireChangeSet: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}
    

  prune:
    automatic: true
    includeLayers: true
    number: 5

  stageVars: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

  deploymentBucket:
    versioning: true
    accelerate: false
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.stageVars.DEP_REGION}
  versionFunctions: false
  logRetentionInDays: 365
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256

  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"
  
  environment:
    CHANGE_SET_BOOLEAN: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}
    #Local Resources Created
    RAG_POSTGRES_DB_CLUSTER: ${sls:stage}-${self:service}-rag-cluster
    RAG_POSTGRES_DB_NAME: RagVectorDb_${sls:stage}
    RAG_POSTGRES_DB_SECRET: ${sls:stage}/${self:service}/rag/postgres/db-creds
    # RAG_POSTGRES_DB_ENV: ${self:custom.stageVariables.RAG_POSTGRES_DB_ENV} #Optional for running locally
    RAG_POSTGRES_DB_USERNAME: ragadmin_${sls:stage}
    RAG_POSTGRES_DB_WRITE_ENDPOINT: !GetAtt RagPostgresDbCluster.Endpoint.Address
    RAG_POSTGRES_DB_READ_ENDPOINT: !GetAtt RagPostgresDbCluster.ReadEndpoint.Address
    MODEL_RATE_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-chat-billing-${sls:stage}-model-rates
    AMPLIFY_ADMIN_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-admin-${sls:stage}-admin-configs
    EMBEDDING_PROGRESS_TABLE: ${self:service}-${sls:stage}-embedding-progress
    OBJECT_ACCESS_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-object-access
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    S3_RAG_CHUNKS_BUCKET_NAME: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-rag-chunks
    API_KEYS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-api-keys
    HASH_FILES_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-hash-files
    CHAT_USAGE_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-chat-usage
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations
    S3_FILE_TEXT_BUCKET_NAME: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-file-text
    GROUPS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-amplify-groups
    EMBEDDING_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    API_BASE_URL: https://${self:custom.stageVars.CUSTOM_API_DOMAIN}/

        #Stand Alone Vars references from local vars file
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    MIN_ACU: ${self:custom.stageVars.MIN_ACU}
    MAX_ACU: ${self:custom.stageVars.MAX_ACU}
    VPC_ID: ${self:custom.stageVars.VPC_ID}
    PRIVATE_SUBNET_ONE: ${self:custom.stageVars.PRIVATE_SUBNET_ONE}
    PRIVATE_SUBNET_TWO: ${self:custom.stageVars.PRIVATE_SUBNET_TWO}
    VPC_CIDR: ${self:custom.stageVars.VPC_CIDR}
    QA_MODEL_NAME: ${self:custom.stageVars.QA_MODEL_NAME}
    API_VERSION: ${self:custom.stageVars.API_VERSION}
    OPENAI_API_KEY: ${self:custom.stageVars.OPENAI_API_KEY}
    EMBEDDING_MODEL_NAME: ${self:custom.stageVars.EMBEDDING_MODEL_NAME}
    ENDPOINTS_ARN: ${self:custom.stageVars.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    COGNITO_USER_POOL_ID: ${self:custom.stageVars.COGNITO_USER_POOL_ID}
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVars.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}
    REGION: ${self:provider.region}
    # SNAPSHOT_ID: ${self:custom.stageVariables.SNAPSHOT_ID}
    
    
  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref EmbeddingIAMPolicy


functions:
  create_table:
    runtime: python3.11
    handler: create_table.create_table
    layers:
     - Ref: PythonRequirementsLambdaLayer
    
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}
    environment:
      RAG_POSTGRES_DB_SECRET: ${self:provider.environment.RAG_POSTGRES_DB_SECRET} #${sls:stage}/rag/postgres/db-creds-2
      RAG_POSTGRES_DB_NAME: ${self:provider.environment.RAG_POSTGRES_DB_NAME} #RagVectorDb_${sls:stage}
      RAG_POSTGRES_DB_USERNAME: ${self:provider.environment.RAG_POSTGRES_DB_USERNAME} #ragadmin_${sls:stage}
      RAG_POSTGRES_DB_WRITE_ENDPOINT: ${self:provider.environment.RAG_POSTGRES_DB_WRITE_ENDPOINT} #!GetAtt RagPostgresDbCluster.Endpoint.Address          
  
         

  process_chunk_for_embedding:
      runtime: python3.11
      handler: embedding.lambda_handler
      layers:
        - Ref: PythonRequirementsLambdaLayer
      reservedConcurrency: 200
      vpc: 
        securityGroupIds:
          - !Ref LambdaSecurityGroup
        subnetIds:
          - ${self:provider.environment.PRIVATE_SUBNET_ONE}
          - ${self:provider.environment.PRIVATE_SUBNET_TWO}
      timeout: 120
      events:
        - sqs:
            batchSize: 1         
            arn: !ImportValue "${sls:stage}-EmbeddingChunksIndexQueueArn"
      environment:
        RAG_POSTGRES_DB_SECRET: ${sls:stage}/${self:service}/rag/postgres/db-creds
        RAG_POSTGRES_DB_NAME: RagVectorDb_${sls:stage}
        RAG_POSTGRES_DB_USERNAME: ragadmin_${sls:stage}
        RAG_POSTGRES_DB_WRITE_ENDPOINT: !GetAtt RagPostgresDbCluster.Endpoint.Address
        ENDPOINTS_ARN: ${self:provider.environment.ENDPOINTS_ARN}
        MODEL_RATE_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-chat-billing-${sls:stage}-model-rates
        AMPLIFY_ADMIN_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-admin-${sls:stage}-admin-configs
        API_VERSION: ${self:provider.environment.API_VERSION}
        EMBEDDING_CHUNKS_INDEX_QUEUE: !ImportValue "${sls:stage}-EmbeddingChunksIndexQueueUrl"
        REGION: ${self:provider.region}

  get_dual_embeddings:
    runtime: python3.11
    handler: embedding-dual-retrieval.process_input_with_dual_retrieval
    layers:
        - Ref: PythonRequirementsLambdaLayer
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}
    timeout: 300
    events:
      - http:
          path: /embedding-dual-retrieval
          method: post
          cors: true
    environment:
      RAG_CHUNK_DOCUMENT_QUEUE_URL: !ImportValue "${sls:stage}-RagChunkDocumentQueueURL"


  terminate_embedding:
    handler: embedding.terminate_embedding
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 15
    events:
      - http:
          path: /embedding/terminate
          method: post
          cors: true

  check_embedding_completion:
    handler: embedding-dual-retrieval.queue_missing_embeddings
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 15
    events:
      - http:
          path: /embedding/check-completion
          method: post
          cors: true
    environment:
      RAG_CHUNK_DOCUMENT_QUEUE_URL: !ImportValue "${sls:stage}-RagChunkDocumentQueueURL"

  get_sqs_messages:
    handler: embedding-sqs.get_in_flight_messages
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 15
    events:
      - http:
          path: /embedding/sqs/get
          method: get
          cors: true

  delete_embeddings:
    runtime: python3.11
    handler: embedding-delete.delete_embeddings
    layers:
      - Ref: PythonRequirementsLambdaLayer
    vpc: 
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - ${self:provider.environment.PRIVATE_SUBNET_ONE}
        - ${self:provider.environment.PRIVATE_SUBNET_TWO}
    timeout: 300
    events:
      - http:
          path: /embedding-delete
          method: post
          cors: true

        

resources:
  Conditions:
    IsProd:
      'Fn::Equals':
        - ${self:provider.stage}
        - 'prod'

  Resources:
    EmbeddingIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.EMBEDDING_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - s3:GetObject  # for accessing S3
                - s3:ListBucket # for listing objects in S3
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - bedrock:InvokeModel*

              Resource:
                - !GetAtt RagPostgresDbCluster.DBClusterArn
                - !Ref RagPostgresDbSecret
                - "${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}"
                - "arn:aws:s3:::${self:provider.environment.S3_RAG_CHUNKS_BUCKET_NAME}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OBJECT_ACCESS_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OBJECT_ACCESS_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.HASH_FILES_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.HASH_FILES_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CHAT_USAGE_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CHAT_USAGE_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.GROUPS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.GROUPS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AMPLIFY_ADMIN_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AMPLIFY_ADMIN_DYNAMODB_TABLE}*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:service}-${sls:stage}-embedding-progress"
                - "arn:aws:sqs:${aws:region}:*:amplify-${self:custom.stageVars.DEP_NAME}-embedding-${sls:stage}-embedding-chunks-index-queue"
                - "arn:aws:sqs:${aws:region}:*:amplify-${self:custom.stageVars.DEP_NAME}-embedding-${sls:stage}-embedding-chunks-index-dlq"
                - "arn:aws:bedrock:*:*:foundation-model/*"
                - "arn:aws:bedrock:*:*:inference-profile/*"
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - "arn:aws:sqs:${aws:region}:*:amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-rag-document-chunk-queue"

    RagPostgresDbSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Subnet group for RDS Aurora Serverless PostgreSQL Vector Database"
        SubnetIds:
          - ${self:provider.environment.PRIVATE_SUBNET_ONE}
          - ${self:provider.environment.PRIVATE_SUBNET_TWO}

    RagPostgresDbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for RDS Aurora Serverless"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: ${self:provider.environment.VPC_CIDR}
          - IpProtocol: tcp
            FromPort: 3306
            ToPort: 3306
            CidrIp: '10.2.224.0/20'
    
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Security group for  Lambda Functions"
        VpcId: ${self:provider.environment.VPC_ID}
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0  
                 
    RagPostgresDbSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.RAG_POSTGRES_DB_SECRET}
        Description: "Credentials for Aurora Serverless PostgreSQL Database"
        GenerateSecretString:
          PasswordLength: 16
          ExcludeCharacters: "\"@/\\" 

    EmbeddingProgressTable:
          Type: 'AWS::DynamoDB::Table'
          Properties:
            BillingMode: PAY_PER_REQUEST
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: true
            SSESpecification:
              SSEEnabled: true
            TableName: ${self:provider.environment.EMBEDDING_PROGRESS_TABLE}
            AttributeDefinitions:
              - AttributeName: 'object_id'
                AttributeType: 'S'
            KeySchema:
              - AttributeName: 'object_id'
                KeyType: 'HASH'  # Partition key

    
    RagPostgresDbCluster:
      Type: AWS::RDS::DBCluster
      DependsOn: RagPostgresDbSecurityGroup
      DeletionPolicy: Snapshot
      Properties:
        DeletionProtection: true
        DatabaseName: ${self:provider.environment.RAG_POSTGRES_DB_NAME}
        DBClusterIdentifier: ${self:provider.environment.RAG_POSTGRES_DB_CLUSTER}
        Engine: aurora-postgresql
        EngineVersion: '15.4' # Specify the compatible engine version for Serverless v2
        ServerlessV2ScalingConfiguration: # This is a new property for Serverless v2
          MinCapacity: ${self:provider.environment.MIN_ACU}
          MaxCapacity: ${self:provider.environment.MAX_ACU}
        EnableHttpEndpoint: true
        EnableCloudwatchLogsExports:
          - postgresql
        MasterUsername: ${self:provider.environment.RAG_POSTGRES_DB_USERNAME}  
        MasterUserPassword: !Sub '{{resolve:secretsmanager:${RagPostgresDbSecret}:SecretString::}}'
        VpcSecurityGroupIds:
          - !Ref RagPostgresDbSecurityGroup
        DBSubnetGroupName: !Ref RagPostgresDbSubnetGroup
        BackupRetentionPeriod: 7
        StorageEncrypted: true
        KmsKeyId: !Ref RagPostgresDbEncryptionKey # Add the ARN or Alias of your existing KMS key or create a new one

      # Add a new AWS KMS Key resource for encryption
    RagPostgresDbEncryptionKey:
      Type: 'AWS::KMS::Key'
      Properties:
        Description: 'KMS key for encrypting the RAG Postgres DB cluster'
        Enabled: true
        EnableKeyRotation: true
        KeyPolicy:
          Version: '2012-10-17'
          Statement:
            - Sid: 'Allow administration of the key'
              Effect: 'Allow'
              Principal:
                AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
              Action:
                - 'kms:*'
              Resource: '*'

    RagPostgresDbInstance1:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RagPostgresDbCluster
        
    #Only create the second instance if the stage is prod
    RagPostgresDbInstance2:
      Type: 'AWS::RDS::DBInstance'
      Condition: IsProd
      Properties:
        Engine: aurora-postgresql
        DBInstanceClass: db.serverless
        DBClusterIdentifier: !Ref RagPostgresDbCluster
       
       