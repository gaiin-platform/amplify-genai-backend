service: amplify-${self:custom.stageVars.DEP_NAME}-lambda-basic-ops

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-cloudformation-changesets

custom:
  pythonRequirements:
    dockerizePip: true
  stageVars: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

  cf-changesets:
    requireChangeSet: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}  

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.stageVars.DEP_REGION}
  versionFunctions: false
  logRetentionInDays: 365  
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"


  environment:
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    DEFAULT_SECRET_PARAMETER_PREFIX: "/pdb"
    DEFAULT_ACCOUNT: "default"
    DEFAULT_LLM_QUERY_MODEL: "anthropic.claude-3-5-sonnet-20240620-v1:0"
    OBJECT_ACCESS_API_ENDPOINT: "https://${self:custom.stageVars.CUSTOM_API_DOMAIN}/utilities/can_access_objects"
    USER_SESSIONS_DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage}-work-sessions
    USER_RECORDS_DYNAMODB_TABLE_NAME: ${self:service}-${sls:stage}-work-records
    ATTACHMENT_STORAGE_S3_BUCKET_NAME: ${self:service}-${sls:stage}-work-record-attachments
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    API_KEYS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-api-keys
    DYNAMO_DYNAMIC_CODE_TABLE: ${self:service}-${sls:stage}-dynamic-code
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations
    DYNAMIC_CODE_BUCKET: ${self:service}-${sls:stage}-dynamic-code
    LAMBDA_BASIC_OPS_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    JOB_STATUS_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-assistants-api-${sls:stage}-job-status
    JOB_RESULTS_BUCKET: amplify-${self:custom.stageVars.DEP_NAME}-assistants-api-${sls:stage}-job-results
    WORKFLOW_LAMBDA_NAME: ${self:service}-${self:provider.stage}-llm_workflow_runner
    USER_STORAGE_TABLE: ${self:service}-${sls:stage}-user-storage
    #AWS_REGION optional for /chat/service.py 
    APP_ARN_NAME: ${sls:stage}-amplify-app-vars
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}

  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole      
        - !Ref LambdaBasicOpsIAMPolicy

functions:

  create_code:
    handler: service/dynamic.create_code
    timeout: 30
    events:
      - http:
          path: code/create
          method: post
          cors: true

  list_code:
    handler: service/dynamic.list_user_code
    timeout: 30
    events:
      - http:
          path: code/list
          method: post
          cors: true

  invoke_code:
    handler: service/dynamic.invoke_code
    timeout: 30
    events:
      - http:
          path: code/invoke
          method: post
          cors: true

  llm_prompt_datasource:
    handler: service/core.llm_prompt_datasource
    timeout: 30
    events:
      - http:
          path: llm/query
          method: post
          cors: true

  llm_rag_prompt_datasource:
    handler: service/core.llm_prompt_datasource_rag
    timeout: 30
    events:
      - http:
          path: llm/rag_query
          method: post
          cors: true

  llm_qa_check:
    handler: service/core.llm_qa_check
    timeout: 30
    events:
      - http:
            path: /llm/qa_check
            method: post
            cors: true

  llm_workflow:
    handler: service/core.llm_workflow
    timeout: 900
    events:
      - http:
          path: /llm/workflow
          method: post
          cors: true

  llm_workflow_async:
    handler: service/core.llm_workflow_async
    events:
      - http:
          path: /llm/workflow-start
          method: post
          cors: true

  llm_workflow_runner:
    handler: service/core.llm_workflow_lambda_handler
    timeout: 900


  echo:
    handler: service/work.echo
    events:
      - http:
          path: /work/echo
          method: post
          cors: true

  create_user_session:
    handler: service/work.create_user_session
    timeout: 30
    events:
      - http:
          path: /work/session/create
          method: post
          cors: true

  add_user_record:
    handler: service/work.add_user_record
    timeout: 30
    events:
      - http:
          path: /work/session/add_record
          method: post
          cors: true

  list_user_records:
    handler: service/work.list_user_records
    timeout: 30
    events:
      - http:
          path: /work/session/list_records
          method: post
          cors: true

  delete_user_record:
    handler: service/work.delete_user_record
    timeout: 30
    events:
      - http:
          path: /work/session/delete_record
          method: post
          cors: true

  stitch_records:
    handler: service/work.stitch_records
    timeout: 30
    events:
      - http:
          path: /work/session/stitch_records
          method: post
          cors: true


  user_data_router:
    handler: service/user_data.route
    timeout: 30
    events:
      - http:
          path: /user-data/{proxy+}
          method: post
          cors: true

resources:
  Resources:
    LambdaBasicOpsIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.LAMBDA_BASIC_OPS_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:Query
                - s3:GetObject
                - s3:PutObject
                - s3:ListBucket
                - s3:DeleteObject
              Resource:
                - "arn:aws:s3:::${self:provider.environment.JOB_RESULTS_BUCKET}/*"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_SESSIONS_DYNAMODB_TABLE_NAME}"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_RECORDS_DYNAMODB_TABLE_NAME}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMO_DYNAMIC_CODE_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMO_DYNAMIC_CODE_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.JOB_STATUS_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.JOB_STATUS_TABLE}/*"
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - 'arn:aws:secretsmanager:us-east-1:*:secret:${self:provider.environment.APP_ARN_NAME}*'
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: 
                - arn:aws:s3:::${self:provider.environment.ATTACHMENT_STORAGE_S3_BUCKET_NAME}/*
                - arn:aws:s3:::${self:provider.environment.DYNAMIC_CODE_BUCKET}/*
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:${self:service}-${self:provider.stage}-llm_workflow_runner
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:BatchWriteItem
                - dynamodb:BatchGetItem
              Resource:
                - !GetAtt UserStorageTable.Arn
                - !Join ['', [!GetAtt UserStorageTable.Arn, '/index/*']]

    UserSessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_SESSIONS_DYNAMODB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: session_id
            AttributeType: N
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: session_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    UserRecordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_RECORDS_DYNAMODB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: session_id
            AttributeType: N
          - AttributeName: record_id
            AttributeType: N
        KeySchema:
          - AttributeName: session_id
            KeyType: HASH
          - AttributeName: record_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    DynamicCodeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMO_DYNAMIC_CODE_TABLE}
        AttributeDefinitions:
          - AttributeName: uuid
            AttributeType: S
          - AttributeName: creator
            AttributeType: S
        KeySchema:
          - AttributeName: uuid
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        GlobalSecondaryIndexes:
          - IndexName: CreatorIndex
            KeySchema:
              - AttributeName: creator
                KeyType: HASH
              - AttributeName: uuid
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    UserStorageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_STORAGE_TABLE}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: UUID
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UUID-index
            KeySchema:
              - AttributeName: UUID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    AttachmentStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_STORAGE_S3_BUCKET_NAME}

    DynamicCodeBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.DYNAMIC_CODE_BUCKET}