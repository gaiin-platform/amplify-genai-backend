service: amplify-${self:custom.stageVars.DEP_NAME}-lambda-optimizer

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-cloudformation-changesets  

custom:
  pythonRequirements:
    dockerizePip: true

  cf-changesets:
    requireChangeSet: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}

  stageVars: ${file(../var/${self:provider.stage}-var.yml)} 
  stages:
    - dev
    - staging
    - prod

    
provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.stageVars.DEP_REGION}
  versionFunctions: false
  logRetentionInDays: 365
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${self:custom.stageVars.DEP_NAME}-${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${self:custom.stageVars.DEP_NAME}-${sls:stage}-RestApiRootResourceId"  
  environment:
    CHANGE_SET_BOOLEAN: ${self:custom.stageVars.CHANGE_SET_BOOLEAN} 
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    DEFAULT_ACCOUNT: "default"
    DEFAULT_LLM_QUERY_MODEL: "gpt-4o"
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    API_KEYS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-api-keys
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations
    LAMBDA_OPTIMIZER_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    OBJECT_ACCESS_API_ENDPOINT: https://${self:custom.stageVars.CUSTOM_API_DOMAIN}/utilities/can_access_objects
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}
    API_BASE_URL: https://${self:custom.stageVars.CUSTOM_API_DOMAIN}


  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - !Ref LambdaOptimizerIAMPolicy      



functions:

  generate_optimized_prompt:
    handler: service/core.optimize
    timeout: 30
    events:
      - http:
          path: optimizer/prompt
          method: post
          cors: true

resources:
  Resources:
    LambdaOptimizerIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.LAMBDA_OPTIMIZER_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource:
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"


