service: amplify-${self:custom.stageVars.DEP_NAME}-agent-loop

frameworkVersion: "3"

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-cloudformation-changesets
  - serverless-python-requirements

custom:
  stageVars: ${file(../var/${self:provider.stage}-var.yml)}
  pythonRequirements:
    dockerizePip: true
    usePoetry: false
    usePipenv: false
    fileName: requirements.txt
  stages:
    - dev
    - staging
    - prod
  cf-changesets:
    requireChangeSet: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}
  # Using your existing repository
  ecrRepository: 654654422653.dkr.ecr.us-east-1.amazonaws.com/dev-amplifygenai-repo
  # Add timestamp to image tags from build script
  deployTimestamp: ${env:DEPLOY_TIMESTAMP, ""}

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.stageVars.DEP_REGION}
  runtime: python3.11
  versionFunctions: false
  logRetentionInDays: 365
  tracing:
    lambda: true
  deploymentMethod: direct  # Force direct deployment to update container image
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"

  environment:
    LLM_ENDPOINTS_SECRETS_NAME: ${sls:stage}-openai-endpoints
    LLM_ENDPOINTS_SECRETS_NAME_ARN: ${self:custom.stageVars.LLM_ENDPOINTS_SECRETS_NAME_ARN}
    SECRETS_ARN_NAME: ${sls:stage}-amplify-app-secrets
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    API_KEYS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-api-keys
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations
    LAMBDA_AGENT_LOOP_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy-updated
    API_BASE_URL: "https://${self:custom.stageVars.CUSTOM_API_DOMAIN}"
    OPS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-ops-${sls:stage}-ops
    AGENT_STATE_DYNAMODB_TABLE: ${self:service}-${sls:stage}-agent-state
    AGENT_STATE_BUCKET: ${self:service}-${sls:stage}-agent-state
    # We will need to change this below in the policy when we migrate too
    # OPS_LAMBDA_NAME: amplify-${self:custom.stageVars.DEP_NAME}-se-${sls:stage}-opExecLambda
    AGENT_QUEUE_URL: !Ref AgentQueue
    AGENT_FAT_CONTAINER_URL: ${cf:${self:service}-${sls:stage}.AgentRouterFnUrlContainerFatLambdaFunctionUrl}
    FILES_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-user-files
    DB_CONNECTIONS_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-db-connections
    USER_TAGS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-user-tags
    EMAIL_SETTINGS_DYNAMO_TABLE: ${self:service}-${sls:stage}-email-allowed-senders
    ORGANIZATION_EMAIL_DOMAIN: ${self:custom.stageVars.ORGANIZATION_EMAIL_DOMAIN}
    S3_IMAGE_INPUT_BUCKET_NAME: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-image-input
    S3_RAG_INPUT_BUCKET_NAME: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-rag-input
    AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE: ${self:service}-${sls:stage}-agent-event-templates
    ASSISTANTS_ALIASES_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-assistants-${sls:stage}-assistant-aliases
    ASSISTANTS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-assistants-${sls:stage}-assistants
    DEFAULT_SECRET_PARAMETER_PREFIX: "/agent"
    WORKFLOW_TEMPLATES_TABLE: ${self:service}-${sls:stage}-workflow-registry
    WORKFLOW_TEMPLATES_BUCKET: ${self:service}-${sls:stage}-workflow-templates
    SCHEDULED_TASKS_TABLE: ${self:service}-${sls:stage}-scheduled-tasks
    SCHEDULED_TASKS_LOGS_BUCKET: ${self:service}-${sls:stage}-scheduled-tasks-logs
    APP_ARN_NAME: ${sls:stage}-amplify-app-vars
    CHAT_USAGE_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-chat-usage
    MODEL_RATE_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-chat-billing-${sls:stage}-model-rates
    REQUEST_STATE_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-amplify-js-${sls:stage}-request-state
    DATASOURCES_RESOLVER_ENDPOINT: ${self:custom.stageVars.CHAT_ENDPOINT}
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}

  iam:
    role:
      managedPolicies:
        - !Ref LambdaAgentLoopIAMPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

functions:
  agentRouter:
    handler: service/core.route
    runtime: python3.11
    tracing: Active
    timeout: 900
    events:
      - http:
          path: vu-agent/{proxy+}
          method: post

  # Original handler-based function URL - keep this working
  agentRouterFnUrl:
    handler: service/core.route
    runtime: python3.11
    tracing: Active
    timeout: 900
    url:
      cors: true

  # New container-based function with different name
  agentRouterContainer:
    image:
      uri: ${self:custom.ecrRepository}:${sls:stage}-agent-router-${self:custom.deployTimestamp}
      command: ["service.core.route"]
    timeout: 900
    tracing: Active
    memorySize: 4096
    events:
      - http:
          path: vu-agent-container/{proxy+}
          method: post

  # New container-based function URL with different name
  agentRouterFnUrlContainer:
    image:
      uri: ${self:custom.ecrRepository}:${sls:stage}-agent-router-${self:custom.deployTimestamp}
      command: ["service.core.route"]
    timeout: 900
    tracing: Active
    memorySize: 4096
    url:
      cors: true

  agentRouterFnUrlContainerFat:
    image:
      uri: ${self:custom.ecrRepository}:${sls:stage}-agent-router-fat-${self:custom.deployTimestamp}
      command: ["service.core.route"]
    timeout: 900
    tracing: Active
    memorySize: 4096
    url:
      cors: true

  agentEventProcessor:
    handler: service/agent_queue.route_queue_event
    runtime: python3.11
    timeout: 900
    tracing: Active
    events:
      - sqs:
          arn: !GetAtt AgentQueue.Arn
          batchSize: 1

  scheduledTasksProcessor:
    handler: scheduled_tasks_events/scheduled_tasks.execute_scheduled_tasks
    runtime: python3.11
    timeout: 300
    events:
      - schedule:
          rate: rate(3 minutes)
          enabled: true
          description: "Run every 3 minutes to check for scheduled tasks that need to be executed"

  toolsEndpointLambda:
    handler: service/core.get_builtin_tools
    runtime: python3.11
    timeout: 30
    memorySize: 4096
    events:
      - http:
          path: vu-agent/tools
          method: get
          cors: true

resources:
  Resources:
    LambdaAgentLoopIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.LAMBDA_AGENT_LOOP_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:PutParameter
              Resource:
                - "arn:aws:ssm:${self:provider.region}:${aws:accountId}:parameter${self:provider.environment.DEFAULT_SECRET_PARAMETER_PREFIX}/*"
            # - Effect: Allow
            #   Action:
            #     - lambda:InvokeFunction
            #   Resource: arn:aws:lambda:${self:provider.region}:${aws:accountId}:function:amplify-${self:custom.stageVars.DEP_NAME}-se-${sls:stage}-opExecLambda
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - s3:GetObject
                - s3:PutObject
                - s3:ListObjects
                - s3:ListBucket
                - s3:DeleteObject
              Resource:
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DB_CONNECTIONS_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DB_CONNECTIONS_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ASSISTANTS_ALIASES_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OPS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OPS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.EMAIL_SETTINGS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.EMAIL_SETTINGS_DYNAMO_TABLE}/index/*"
                - "arn:aws:s3:::${self:provider.environment.AGENT_STATE_BUCKET}"
                - "arn:aws:s3:::${self:provider.environment.AGENT_STATE_BUCKET}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CHAT_USAGE_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CHAT_USAGE_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.WORKFLOW_TEMPLATES_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.WORKFLOW_TEMPLATES_TABLE}/*"
                - "arn:aws:s3:::${self:provider.environment.WORKFLOW_TEMPLATES_BUCKET}"
                - "arn:aws:s3:::${self:provider.environment.WORKFLOW_TEMPLATES_BUCKET}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.REQUEST_STATE_DYNAMO_TABLE}"
                - "arn:aws:s3:::${self:provider.environment.S3_RAG_INPUT_BUCKET_NAME}/*"
                - "arn:aws:s3:::${self:provider.environment.S3_IMAGE_INPUT_BUCKET_NAME}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.FILES_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.FILES_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USER_TAGS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.USER_TAGS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.SCHEDULED_TASKS_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.SCHEDULED_TASKS_TABLE}/index/*"
                - "arn:aws:s3:::${self:provider.environment.SCHEDULED_TASKS_LOGS_BUCKET}"
                - "arn:aws:s3:::${self:provider.environment.SCHEDULED_TASKS_LOGS_BUCKET}/*"
                
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - '${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}'
                - 'arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:provider.environment.LLM_ENDPOINTS_SECRETS_NAME_ARN}'
                - 'arn:aws:secretsmanager:us-east-1:*:secret:${self:provider.environment.APP_ARN_NAME}*'
                - 'arn:aws:secretsmanager:${aws:region}:*:secret:${self:provider.environment.SECRETS_ARN_NAME}*'
            - Effect: Allow
              Action:
                - sqs:ChangeMessageVisibility
                - sqs:DeleteMessage
                - sqs:SendMessage
              Resource:
                - !GetAtt AgentQueue.Arn

            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource:
                - arn:aws:bedrock:*::foundation-model/*
                - arn:aws:bedrock:*:654654422653:inference-profile/*

            # Add permission to pull from your specific ECR repository
            - Effect: Allow
              Action:
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
              Resource:
                - arn:aws:ecr:us-east-1:654654422653:repository/dev-amplifygenai-repo

    AgentStateDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AGENT_STATE_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: sessionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    AgentStateBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.AGENT_STATE_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000

    AgentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-agent-queue
        VisibilityTimeout: 910
        MessageRetentionPeriod: 1209600
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt AgentDeadLetterQueue.Arn
          maxReceiveCount: 3

    AgentDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-agent-dlq
        MessageRetentionPeriod: 1209600

    AgentEmailTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${sls:stage}-email-topic
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt AgentQueue.Arn

    AgentEventTemplatesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.AGENT_EVENT_TEMPLATES_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: tag
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: tag
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    AgentEmailTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        Topics:
          - !Ref AgentEmailTopic
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: ses.amazonaws.com
              Action: sns:Publish
              Resource: !Ref AgentEmailTopic

    # Update SQS policy to allow SNS
    AgentQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref AgentQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action: sqs:SendMessage
              Resource: !GetAtt AgentQueue.Arn
              Condition:
                ArnEquals:
                  aws:SourceArn: !Ref AgentEmailTopic

    # Add these resources
    WorkflowTemplatesDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.WORKFLOW_TEMPLATES_TABLE}
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: templateId
            AttributeType: S
          - AttributeName: isPublic
            AttributeType: N
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: templateId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TemplateIdPublicIndex
            KeySchema:
              - AttributeName: templateId
                KeyType: HASH
              - AttributeName: isPublic
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    EmailSendersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: false
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
          -
            AttributeName: tag
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
          - AttributeName: tag
            KeyType: RANGE
        TableName: ${self:provider.environment.EMAIL_SETTINGS_DYNAMO_TABLE}

    WorkflowTemplatesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.WORKFLOW_TEMPLATES_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000
              
    # Add scheduled tasks resources
    ScheduledTasksDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-scheduled-tasks
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
          - AttributeName: taskId
            AttributeType: S
          - AttributeName: active
            AttributeType: N
        KeySchema:
          - AttributeName: user
            KeyType: HASH
          - AttributeName: taskId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ActiveTasksIndex
            KeySchema:
              - AttributeName: active
                KeyType: HASH
              - AttributeName: taskId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
          
    ScheduledTasksLogsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${sls:stage}-scheduled-tasks-logs
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - '*'
              MaxAge: 3000