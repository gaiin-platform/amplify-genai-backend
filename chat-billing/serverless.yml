service: amplify-${self:custom.stageVars.DEP_NAME}-chat-billing

frameworkVersion: '3'

package:
  exclude:
    - node_modules/**
    - venv/**

plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-deployment-bucket
  - serverless-python-requirements
  - serverless-cloudformation-changesets
    
custom:
  pythonRequirements:
    dockerizePip: true
    layer: true

  cf-changesets:
    requireChangeSet: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}
    
  serverless-offline: 
    custom:
      config: ${file(../var/${self:provider.stage}-var.yml)}

  stageVars: ${file(../var/${self:provider.stage}-var.yml)}
  stages:
    - dev
    - staging
    - prod

  deploymentBucket:
    versioning: true
    accelerate: true
    blockPublicAccess: true
    tags:
      - Key: Environment
        Value: ${self:provider.stage}

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.stageVars.DEP_REGION}
  versionFunctions: false
  logRetentionInDays: 365
  deploymentBucket:
    name: ${self:service}-${sls:stage}-deployment-bucket
    serverSideEncryption: AES256
  
  apiGateway:
    restApiId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiId"
    restApiRootResourceId:
      Fn::ImportValue: !Sub "${sls:stage}-RestApiRootResourceId"
  
  environment:
    CHANGE_SET_BOOLEAN: ${self:custom.stageVars.CHANGE_SET_BOOLEAN}
    MODEL_RATE_TABLE: ${self:service}-${sls:stage}-model-rates
    ADDITIONAL_CHARGES_TABLE: ${self:service}-${sls:stage}-additional-charges
    HISTORY_USAGE_TABLE: ${self:service}-${sls:stage}-history-usage
    CHAT_USAGE_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-chat-usage
    OAUTH_AUDIENCE: ${self:custom.stageVars.OAUTH_AUDIENCE}
    OAUTH_ISSUER_BASE_URL: ${self:custom.stageVars.OAUTH_ISSUER_BASE_URL}
    ACCOUNTS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-accounts
    API_KEYS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-object-access-${sls:stage}-api-keys
    COST_CALCULATIONS_DYNAMO_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-${sls:stage}-cost-calculations
    CHAT_BILLING_IAM_POLICY_NAME: ${self:service}-${sls:stage}-iam-policy
    API_BASE_URL: https://${self:custom.stageVars.CUSTOM_API_DOMAIN}
    IDP_PREFIX: ${self:custom.stageVars.IDP_PREFIX}
    AMPLIFY_ADMIN_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-admin-${sls:stage}-admin-configs
    OPS_DYNAMODB_TABLE: amplify-${self:custom.stageVars.DEP_NAME}-lambda-ops-${sls:stage}-ops

  iam:
    role:
      managedPolicies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::${aws:accountId}:policy/${self:provider.environment.CHAT_BILLING_IAM_POLICY_NAME}


functions:

  get_user_available_models:
    handler: service/core.get_user_available_models
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 10
    events:
      - http:
          path: /available_models
          method: get
          cors: true


  update_supported_models:
    handler: service/core.update_supported_models
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 10
    events:
      - http:
          path: /supported_models/update
          method: post
          cors: true

  get_supported_models:
    handler: service/core.get_supported_models_as_admin
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 10
    events:
      - http:
          path: /supported_models/get
          method: get
          cors: true

  get_default_models:
    handler: service/core.get_default_models
    layers:
      - Ref: PythonRequirementsLambdaLayer
    timeout: 10
    events:
      - http:
          path: /default_models
          method: get
          cors: true
  
  tools_op:
    handler: tools_ops.api_tools_handler
    timeout: 30
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: models/register_ops
          method: post
          cors: true
  
resources:
  Resources:
    ChatBillingIAMPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:provider.environment.CHAT_BILLING_IAM_POLICY_NAME}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:DeleteItem
                - dynamodb:CreateTable
                - dynamodb:BatchWriteItem
              Resource:
                - "arn:aws:secretsmanager:us-east-1:*:secret:aws/ses/credentials-i82Vzw"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MODEL_RATE_TABLE}/*"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADDITIONAL_CHARGES_TABLE}"
                - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ADDITIONAL_CHARGES_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.API_KEYS_DYNAMODB_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ACCOUNTS_DYNAMO_TABLE}/index/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.COST_CALCULATIONS_DYNAMO_TABLE}/*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AMPLIFY_ADMIN_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.AMPLIFY_ADMIN_DYNAMODB_TABLE}*"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OPS_DYNAMODB_TABLE}"
                - "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.OPS_DYNAMODB_TABLE}/index/*"
    # model rates needed for usage cost calculations
    ModelRateTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        TableName: ${self:provider.environment.MODEL_RATE_TABLE}
        AttributeDefinitions:
          - AttributeName: 'ModelID'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'ModelID'
            KeyType: 'HASH'

    # contains charges not included in chat usage table 
    # these charges could be for assistants (code interpreter), database entries, embeddings, infrastructure/lambdas, RAG, Dynamo, S3
    #
    # This table current contains code interpreter session and usage records
    AdditionalChargesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.ADDITIONAL_CHARGES_TABLE}
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'

    # daily and monthly usage saved to this table
    HistoryUsageTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:provider.environment.HISTORY_USAGE_TABLE}
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        SSESpecification:
          SSEEnabled: true
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
          - AttributeName: 'userDateComposite'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
          - AttributeName: 'userDateComposite'
            KeyType: 'RANGE'
